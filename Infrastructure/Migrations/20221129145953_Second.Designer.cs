// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bloggr.Infrastructure.Migrations
{
    [DbContext(typeof(BloggrContext))]
    [Migration("20221129145953_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Abstracts.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Bloggr.Domain.Entities.Interest", b =>
                {
                    b.HasBaseType("Domain.Abstracts.BaseEntity");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CreatedById");

                    b.HasDiscriminator().HasValue("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasBaseType("Domain.Abstracts.BaseEntity");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.ToTable(t =>
                        {
                            t.Property("CreatedById")
                                .HasColumnName("Comment_CreatedById");
                        });

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("Domain.Entities.Like", b =>
                {
                    b.HasBaseType("Domain.Abstracts.BaseEntity");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.ToTable(t =>
                        {
                            t.Property("CreatedById")
                                .HasColumnName("Like_CreatedById");

                            t.Property("PostId")
                                .HasColumnName("Like_PostId");
                        });

                    b.HasDiscriminator().HasValue("Like");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasBaseType("Domain.Abstracts.BaseEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Testing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CreatedById");

                    b.ToTable(t =>
                        {
                            t.Property("Content")
                                .HasColumnName("Post_Content");

                            t.Property("CreatedById")
                                .HasColumnName("Post_CreatedById");
                        });

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasBaseType("Domain.Abstracts.BaseEntity");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable(t =>
                        {
                            t.Property("CreatedById")
                                .HasColumnName("User_CreatedById");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Bloggr.Domain.Entities.Interest", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("Interests")
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Domain.Entities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.Like", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Domain.Entities.Post", null)
                        .WithMany("Likes")
                        .HasForeignKey("PostId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Interests");
                });
#pragma warning restore 612, 618
        }
    }
}
